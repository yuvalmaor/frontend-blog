name: Build and Push Docker Image

on:
  push:
    branches:
      - main  # Trigger this action on pushes to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get the latest version from DockerHub
        id: get-latest-version
        run: |
          # Authenticate to Docker Hub and get the token
          TOKEN=$(curl -s -X POST -H "Content-Type: application/json" \
            -d "{\"username\": \"${{ secrets.DOCKER_USERNAME }}\", \"password\": \"${{ secrets.DOCKER_PASSWORD }}\"}" \
            https://hub.docker.com/v2/users/login/ | jq -r .token)

          # Check if token was obtained
          if [ "$TOKEN" == "null" ] || [ -z "$TOKEN" ]; then
            echo "Failed to authenticate. Please check your username and password."
            exit 1
          fi

          # Fetch tags for the private repository
          LATEST_VERSION=$(curl -s -H "Authorization: Bearer $TOKEN" \
            "https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/blogfrontend/tags/" | \
            jq -r '.results[].name' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -1)

          if [ -z "$LATEST_VERSION" ]; then
            LATEST_VERSION="0.0.0"  # Default to 0.0.0 if no versions exist
          fi

          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

      - name: Increment the patch version
        id: increment-version
        run: |
          LATEST_VERSION=${{ env.LATEST_VERSION }}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_VERSION"
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t ym5533/blogfrontend:${{ env.NEW_VERSION }} .

      - name: Push Docker image to DockerHub
        run: |
          docker push ym5533/blogfrontend:${{ env.NEW_VERSION }}

      - name: List Docker images
        run: |
          docker images
#from here update helmfile repo  

      - name: Clone the target repository
        run: |
          git clone https://github.com/yuvalmaor/helmfile-blog.git target-repo
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: List all files in the repository
        run: |
          echo "Listing all files in the repository:"
          ls -R
      - name: Update frontend version in values.yaml
        run: |
          sed -i 's/frontendtag: "<old version>"/frontendtag: "${{ env.NEW_VERSION }}"/' ./target-repo/blogchart/values.yaml

      - name: Commit and push changes to target repository
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          cd target-repo
          ls -la 
          cat ./blogchart/values.yaml
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/yuvalmaor/helmfile-blog.git
          git add ./blogchart/values.yaml
          git commit -am "Replace  new version"
          git push